function isPrime(n: number) {
  for (let i = 2; i <= Math.sqrt(n); i++) {
    if (n % i === 0) return false;
  }
  return n > 1;
}

function squareRootModulo(n: number, p: number): number {
  // this function returns the square root of n modulo p
  // if it exists, otherwise it returns -1
  // this is an implementation of Tonelli-Shanks algorithm
  // (https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm)
  if (p % 4 === 3) {
    return Math.pow(n, (p + 1) / 4) % p;
  } else if (p % 8 === 5) {
    let x = Math.pow(n, (p + 3) / 8) % p;
    let b = Math.pow(x, 2) % p;
    if (b === n % p) {
      return x;
    } else {
      return (x * Math.pow(2, (p - 1) / 4)) % p;
    }
  } else {
    // find a quadratic non-residue
    let q = 2;
    while (true) {
      if (isPrime(q) && squareRootModulo(q, p) === -1) {
        break;
      }
      q++;
    }
    let s = 0;
    let t = p - 1;
    while (t % 2 === 0) {
      s++;
      t /= 2;
    }
    let inv_n = Math.pow(n, p - 2) % p;
    let inv_q = Math.pow(q, p - 2) % p;
    let z = Math.pow(q, t) % p;
    let r = Math.pow(n, (t + 1) / 2) % p;
    let m = s;
    while (true) {
      if (m === 0) {
        return r;
      }
      let i = 0;
      let zz = z;
      while (i < m - 1) {
        zz = Math.pow(zz, 2) % p;
        i++;
      }
      if (zz === 1) {
        return r;
      }
      let b = Math.pow(zz, Math.pow(2, s - m - 1)) % p;
      r = (r * b) % p;
      z = (b * b) % p;
      m = s;
    }
  }
}

function getOrderOfEllipticCurveGroup(p: number, a: number, b: number) {
  // this is an algorithm that would return the number of
  // elements in the elliptic curve group generated by
  // a finite field of size p on curve equation y^2 = x^3 + ax + b
  // this is a naive implementation
  let count = 1;
  for (let x = 0; x < p; x++) {
    let y2 = Math.pow(x, 3) + a * x + b;
    let y = squareRootModulo(y2, p);
    if (y !== -1) {
      count++;
    }
  }
  return count;
}

function getGeneratorOfEllipticCurveGroup(
  p: number,
  a: number,
  b: number
): [number, number] {
  // this function returns a generator of the elliptic curve group
  // generated by a finite field of size p on curve equation y^2 = x^3 + ax + b
  // this is a naive implementation
  for (let x = 0; x < p; x++) {
    let y2 = Math.pow(x, 3) + a * x + b;
    let y = squareRootModulo(y2, p);
    if (y !== -1) {
      return [x, y];
    }
  }
  throw new Error("No generator found");
}
